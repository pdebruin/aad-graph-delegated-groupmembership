@{
    ViewData["Title"] = "Home";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>

<table class="table table-striped table-condensed" style="font-family: 'Segoe UI'">
    <tr>
        <th colspan="2">
            My groups
        </th>
    </tr>
    @{
        //var groups = (IEnumerable<Microsoft.Graph.Group>)ViewData["groups"];
        var groups = (Microsoft.Graph.UserMemberOfCollectionWithReferencesPage)ViewData["groups"];

        foreach (var group in groups)
        {
            var properties = group.GetType().GetProperties();
            foreach (var child in properties)
            {
                if (child.Name == "DisplayName")// || child.Name == "Id")
                {
                    object value = child.GetValue(group);
                    string stringRepresentation;
                    if (!(value is string) && value is IEnumerable<string>)
                    {
                        stringRepresentation = "["
                            + string.Join(", ", (value as IEnumerable<string>).OfType<object>().Select(c => c.ToString()))
                            + "]";
                    }
                    else
                    {
                        stringRepresentation = value?.ToString();
                    }

                    <tr>
                        <td colspan="2"> @stringRepresentation </td>
                    </tr>
                }
            }
        }
    }
    <tr>
        <th colspan="2">
            My apps
        </th>
    </tr>

    @{
        //        var apps = (IEnumerable<Microsoft.Graph.UserAppRoleAssignmentsCollectionPage>)ViewData["applications"];
        var apps = (Microsoft.Graph.UserAppRoleAssignmentsCollectionPage)ViewData["applications"];
        foreach (var app in apps)
        {
            var properties = app.GetType().GetProperties();
            foreach (var child in properties)
            {
                if (child.Name == "ResourceDisplayName")// || child.Name == "ResourceId")
                {

                    object value = child.GetValue(app);
                    string stringRepresentation;
                    if (!(value is string) && value is IEnumerable<string>)
                    {
                        stringRepresentation = "["
                            + string.Join(", ", (value as IEnumerable<string>).OfType<object>().Select(c => c.ToString()))
                            + "]";
                    }
                    else
                    {
                        stringRepresentation = value?.ToString();
                    }

                    <tr>
                        <td colspan="2"> @stringRepresentation </td>
                    </tr>
                }
            }
        }
    }

</table>